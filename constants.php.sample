<?php
// This file is part of CoDev-Timetracking.
// - The Variables in here can be customized to your needs
// - This file has been generated during install on Mon 05 Dec 2011 17:02

include_once('classes/config.class.php');

class Constants {
   
   public static $codevInstall_timestamp;

   public static $mantisURL;

   // log file as defined in log4php.xml
   public static $codevtt_logfile;  

   public static $homepage_title;

   public static $codevRootDir;

   // --- RESOLUTION ---
   # WARNING: watch out for i18n ! special chars may break PHP code and/or DB values
   # INFO: the values depend on what you defined in codev_config_table.resolutionNames
   public static $resolution_fixed;
   public static $resolution_reopened;

   // --- STATUS ---
   # WARNING: CodevTT uses some global variables for status.
   #          Some of these variables are used in the code, so if they are not defined
   #          in the mantis workflow, they need to be created. The mandatory variables are:
   #           $status_new, $status_feedback, $status_acknowledged,
   #           $status_open, $status_closed

   public static $statusNames;

   public static $status_new;
   public static $status_feedback;
   public static $status_acknowledged;
   public static $status_analyzed;
   public static $status_open;
   public static $status_resolved;
   public static $status_validated;
   public static $status_delivered;
   public static $status_closed;
   // TODO add equivalences for all mandatory status not present in workflow (see mantis 131)
   // ex: $status_open = $status_assigned;
   
   public static function staticInit() {
      
      self::$codevInstall_timestamp = 1323039600;
      
      self::$mantisURL = 'http://'.$_SERVER['HTTP_HOST'].'/mantis';
      
      self::$codevtt_logfile = '/tmp/codevtt/logs/codevtt.log';  
      
      self::$homepage_title = 'Welcome';
      
      self::$codevRootDir = dirname(__FILE__);
      
      self::$resolution_fixed = array_search('fixed', Config::getInstance()->getValue(Config::id_resolutionNames));  # 20
      self::$resolution_reopened = array_search('reopened', Config::getInstance()->getValue(Config::id_resolutionNames));  # 30;

      self::$statusNames = Config::getInstance()->getValue(Config::id_statusNames);

      self::$status_new = array_search('new', self::$statusNames);
      self::$status_feedback = array_search('feedback', self::$statusNames);
      self::$status_acknowledged = array_search('acknowledged', self::$statusNames);
      self::$status_analyzed = array_search('analyzed', self::$statusNames);
      self::$status_open = array_search('open', self::$statusNames);
      self::$status_resolved = array_search('resolved', self::$statusNames);
      self::$status_validated = array_search('validated', self::$statusNames);
      self::$status_delivered = array_search('delivered', self::$statusNames);
      self::$status_closed = array_search('closed', self::$statusNames);
      
      date_default_timezone_set('Europe/Paris');

      # Custom Relationships
      define( 'BUG_CUSTOM_RELATIONSHIP_CONSTRAINED_BY', 2500 );
      define( 'BUG_CUSTOM_RELATIONSHIP_CONSTRAINS', 2501 );
   }
   
}

Constants::staticInit();

?>
